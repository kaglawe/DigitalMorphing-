/*
 * MainFrame.java
 *
 * Created on August 15, 2007, 11:05 AM
 */

package main;

import imageexplorer.ImagePane;
import java.awt.Color;
import java.awt.Container;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import javax.media.jai.PlanarImage;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileFilter;
import javax.swing.plaf.FileChooserUI;

/**
 *
 * @author Administrator
 */
public class MainFrame extends javax.swing.JFrame implements WindowListener{
    
    private Container container;
    private WindowList windowList;
    private ChildWindow currentChildWindow;
    
    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        SplashScreen screen=new SplashScreen(this,true);
        screen.setVisible(true);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setTitle("Digital Image Processing And Morphing");
        container=getContentPane();
        container.setBackground(Color.LIGHT_GRAY);
        windowList=new WindowList();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        closeMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();
        effectMenu = new javax.swing.JMenu();
        blueEffect = new javax.swing.JMenuItem();
        greenEffect = new javax.swing.JMenuItem();
        redEffect = new javax.swing.JMenuItem();
        grayEffect = new javax.swing.JMenuItem();
        smoothMenuItem = new javax.swing.JMenuItem();
        resetMenuItem = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        scaleMenuItem = new javax.swing.JMenuItem();
        resolutionMenuItem = new javax.swing.JMenuItem();
        morphingMenuItem = new javax.swing.JMenuItem();
        imageExplorer = new javax.swing.JMenuItem();
        rotateMenuItem = new javax.swing.JMenuItem();
        shearMenuItem = new javax.swing.JMenu();
        horizshearMenuItem = new javax.swing.JMenuItem();
        verticalShearMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open...");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setText("Save As...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        closeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        closeMenuItem.setText("Close");
        closeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeMenuItem);
        fileMenu.add(jSeparator1);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        effectMenu.setMnemonic('E');
        effectMenu.setText("Effect");

        blueEffect.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        blueEffect.setText("Blue Effect...");
        blueEffect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueEffectActionPerformed(evt);
            }
        });
        effectMenu.add(blueEffect);

        greenEffect.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        greenEffect.setText("Green Effect...");
        greenEffect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenEffectActionPerformed(evt);
            }
        });
        effectMenu.add(greenEffect);

        redEffect.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        redEffect.setText("Red Effect...");
        redEffect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redEffectActionPerformed(evt);
            }
        });
        effectMenu.add(redEffect);

        grayEffect.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        grayEffect.setText("GrayEffect...");
        grayEffect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grayEffectActionPerformed(evt);
            }
        });
        effectMenu.add(grayEffect);

        smoothMenuItem.setText("Smooth");
        smoothMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smoothMenuItemActionPerformed(evt);
            }
        });
        effectMenu.add(smoothMenuItem);

        resetMenuItem.setText("Reset");
        resetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetMenuItemActionPerformed(evt);
            }
        });
        effectMenu.add(resetMenuItem);

        menuBar.add(effectMenu);

        toolsMenu.setMnemonic('T');
        toolsMenu.setText("Tools");
        toolsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolsMenuActionPerformed(evt);
            }
        });

        scaleMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK));
        scaleMenuItem.setText("Scale...");
        scaleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scaleMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(scaleMenuItem);

        resolutionMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK));
        resolutionMenuItem.setText("Resolution");
        resolutionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resolutionMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(resolutionMenuItem);

        morphingMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.SHIFT_MASK));
        morphingMenuItem.setText("Morphing...");
        morphingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                morphingMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(morphingMenuItem);

        imageExplorer.setText("ImageExplorer");
        imageExplorer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageExplorerActionPerformed(evt);
            }
        });
        toolsMenu.add(imageExplorer);

        rotateMenuItem.setText("Rotate...");
        rotateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(rotateMenuItem);

        shearMenuItem.setText("Shear");

        horizshearMenuItem.setText("Horizontal");
        horizshearMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizshearMenuItemActionPerformed(evt);
            }
        });
        shearMenuItem.add(horizshearMenuItem);

        verticalShearMenuItem.setText("Vertical");
        verticalShearMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verticalShearMenuItemActionPerformed(evt);
            }
        });
        shearMenuItem.add(verticalShearMenuItem);

        toolsMenu.add(shearMenuItem);

        menuBar.add(toolsMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText("Help");

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, java.awt.event.InputEvent.CTRL_MASK));
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void verticalShearMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verticalShearMenuItemActionPerformed
        ShearSliderWindow shearSliderWindow=new ShearSliderWindow();
        shearSliderWindow.setTitle("Vertical Shear");
        shearSliderWindow.setParent(this);
        shearSliderWindow.setType(shearSliderWindow.VERTICAL);
        shearSliderWindow.setVisible(true);
    }//GEN-LAST:event_verticalShearMenuItemActionPerformed
    
    private void horizshearMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizshearMenuItemActionPerformed
        ShearSliderWindow shearSliderWindow=new ShearSliderWindow();
        shearSliderWindow.setTitle("Horizontal Shear");
        shearSliderWindow.setParent(this);
        shearSliderWindow.setType(shearSliderWindow.HORIZONTAL);
        shearSliderWindow.setVisible(true);
    }//GEN-LAST:event_horizshearMenuItemActionPerformed
    
    private void rotateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateMenuItemActionPerformed
        RotateSliderWindow rotateSliderWindow=new RotateSliderWindow();
        rotateSliderWindow.setTitle("Rotate");
        rotateSliderWindow.setParent(this);
        rotateSliderWindow.setVisible(true);
    }//GEN-LAST:event_rotateMenuItemActionPerformed
    
    private void resetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetMenuItemActionPerformed
        PlanarImage planarImage=currentChildWindow.getOriginalPlanarImage();
        currentChildWindow.setCurrentPlanarImage(planarImage);
    }//GEN-LAST:event_resetMenuItemActionPerformed
    
    private void smoothMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smoothMenuItemActionPerformed
        SmoothEffectWindow smoothEffectWindow=new SmoothEffectWindow();
        smoothEffectWindow.setTitle("Smooth Effect");
        smoothEffectWindow.setParent(this);
        smoothEffectWindow.setVisible(true);
    }//GEN-LAST:event_smoothMenuItemActionPerformed
    
    private void imageExplorerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageExplorerActionPerformed
        
        ImageExplorer imgExplorer=new ImageExplorer();
        imgExplorer.setVisible(true);
        
    }//GEN-LAST:event_imageExplorerActionPerformed
    
    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        
        JFileChooser fileChooser=new JFileChooser();
        JDialog.setDefaultLookAndFeelDecorated(true);
        fileChooser.setAcceptAllFileFilterUsed(true);
        fileChooser.setFileFilter(new FileFilter() {
            
            public boolean accept(File f) {
                if(f.isFile()) {
                    String str=f.getName().toLowerCase();
                    if(str.endsWith("tiff"))
                        return true;
                }
                if(f.isDirectory())
                    return true;
                
                return false;
            }
            
            public String getDescription() {
                return "Tiff Files (*.tiff)";
            }
        });
        fileChooser.setFileFilter(new FileFilter() {
            
            public boolean accept(File f) {
                if(f.isFile()) {
                    String str=f.getName().toLowerCase();
                    if(str.endsWith("gif"))
                        return true;
                }
                if(f.isDirectory())
                    return true;
                
                return false;
            }
            
            public String getDescription() {
                return "Gif Files (*.gif)";
            }
        });
        fileChooser.setFileFilter(new FileFilter() {
            
            public boolean accept(File f) {
                if(f.isFile()) {
                    String str=f.getName().toLowerCase();
                    if(str.endsWith("jpeg")||str.endsWith("jpg"))
                        return true;
                }
                if(f.isDirectory())
                    return true;
                
                return false;
            }
            
            public String getDescription() {
                return "JPEG Files (*.jpg)";
            }
        });
        fileChooser.setFileFilter(new FileFilter() {
            
            public boolean accept(File f) {
                if(f.isFile()) {
                    String str=f.getName().toLowerCase();
                    if(str.endsWith("png"))
                        return true;
                }
                if(f.isDirectory())
                    return true;
                
                return false;
            }
            
            public String getDescription() {
                return "PNG Files (*.png)";
            }
        });
        fileChooser.setFileFilter(new FileFilter() {
            
            public boolean accept(File f) {
                if(f.isFile()) {
                    String str=f.getName().toLowerCase();
                    if(str.endsWith("bmp"))
                        return true;
                }
                if(f.isDirectory())
                    return true;
                
                return false;
            }
            
            public String getDescription() {
                return "Bitmap Files (*.bmp)";
            }
        });
        if(fileChooser.showSaveDialog(currentChildWindow)==JFileChooser.APPROVE_OPTION) {
            File file=fileChooser.getSelectedFile();
            String extension=fileChooser.getFileFilter().getDescription();
            if(extension.equals("Bitmap Files (*.bmp)")) {
                extension="bmp";
            }
            if(extension.equals("PNG Files (*.png)")) {
                extension="png";
            }
            if(extension.equals("JPEG Files (*.jpg)")) {
                extension="jpeg";
            }
            if(extension.equals("Gif Files (*.gif)")) {
                extension="gif";
            }
            if(extension.equals("Tiff Files (*.tiff)")) {
                extension="tiff";
            }
            currentChildWindow.saveAs(file.getPath(),extension);
        }
        
    }//GEN-LAST:event_saveAsMenuItemActionPerformed
    
    private void morphingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_morphingMenuItemActionPerformed
        MorphingFrame morphingFrame=new MorphingFrame();
        morphingFrame.setSourceFileList(windowList.getFileList());
        morphingFrame.setVisible(true);
        
    }//GEN-LAST:event_morphingMenuItemActionPerformed
    
    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        
        
        AboutDialog aboutDialog=new AboutDialog(currentChildWindow,true);
        aboutDialog.setVisible(true);
        
    }//GEN-LAST:event_aboutMenuItemActionPerformed
    
    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        
    }//GEN-LAST:event_fileMenuActionPerformed
    
    private void toolsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolsMenuActionPerformed
        
    }//GEN-LAST:event_toolsMenuActionPerformed
    
    private void grayEffectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grayEffectActionPerformed
        
        PlanarImage planarImage=currentChildWindow.getOriginalPlanarImage();
        ImageProcessor imageProcessor=new ImageProcessor(planarImage);
        PlanarImage changedPlanarImage=imageProcessor.grayEffect();
        currentChildWindow.setCurrentPlanarImage(changedPlanarImage);
        
    }//GEN-LAST:event_grayEffectActionPerformed
    
    private void resolutionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resolutionMenuItemActionPerformed
        
        ImageResolution  imageResolution=new ImageResolution();
        imageResolution.setChildWindow(currentChildWindow);
        imageResolution.setVisible(true);
    }//GEN-LAST:event_resolutionMenuItemActionPerformed
    
    private void scaleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scaleMenuItemActionPerformed
        
        ScaleImage scaleImage=new ScaleImage();
        scaleImage.setChildWindow(currentChildWindow);
        scaleImage.setVisible(true);
        
    }//GEN-LAST:event_scaleMenuItemActionPerformed
    
    private void redEffectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redEffectActionPerformed
        ColorEffectWindow redEffectWindow=new ColorEffectWindow();
        redEffectWindow.setTitle("Red Effect");
        redEffectWindow.setType(ColorEffectWindow.REDEFFECT);
        redEffectWindow.setParent(this);
        redEffectWindow.setVisible(true);
        
    }//GEN-LAST:event_redEffectActionPerformed
    
    private void greenEffectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenEffectActionPerformed
        ColorEffectWindow greenEffectWindow=new ColorEffectWindow();
        greenEffectWindow.setTitle("Green Effect");
        greenEffectWindow.setType(ColorEffectWindow.GREENEFFECT);
        greenEffectWindow.setParent(this);
        greenEffectWindow.setVisible(true);
    }//GEN-LAST:event_greenEffectActionPerformed
    
    private void blueEffectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueEffectActionPerformed
        ColorEffectWindow blueEffectWindow=new ColorEffectWindow();
        blueEffectWindow.setTitle("Blue Effect");
        blueEffectWindow.setType(ColorEffectWindow.BLUEEFFECT);
        blueEffectWindow.setParent(this);
        blueEffectWindow.setVisible(true);
    }//GEN-LAST:event_blueEffectActionPerformed
    
    private void closeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMenuItemActionPerformed
        
        windowList.disposeWindow(currentChildWindow);
        
    }//GEN-LAST:event_closeMenuItemActionPerformed
    
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        
        JFileChooser fileChooser=new JFileChooser();
        JDialog.setDefaultLookAndFeelDecorated(true);
        fileChooser.setAcceptAllFileFilterUsed(true);
        fileChooser.setFileFilter(new FileFilter() {
            
            public boolean accept(File f) {
                if(f.isFile()) {
                    String str=f.getName().toLowerCase();
                    if(str.endsWith("tiff"))
                        return true;
                }
                if(f.isDirectory())
                    return true;
                
                return false;
            }
            
            public String getDescription() {
                return "Tiff Files (*.tiff)";
            }
        });
        fileChooser.setFileFilter(new FileFilter() {
            
            public boolean accept(File f) {
                if(f.isFile()) {
                    String str=f.getName().toLowerCase();
                    if(str.endsWith("gif"))
                        return true;
                }
                if(f.isDirectory())
                    return true;
                
                return false;
            }
            
            public String getDescription() {
                return "Gif Files (*.gif)";
            }
        });
        fileChooser.setFileFilter(new FileFilter() {
            
            public boolean accept(File f) {
                if(f.isFile()) {
                    String str=f.getName().toLowerCase();
                    if(str.endsWith("jpeg")||str.endsWith("jpg"))
                        return true;
                }
                if(f.isDirectory())
                    return true;
                
                return false;
            }
            
            public String getDescription() {
                return "JPEG Files (*.jpg)";
            }
        });
        fileChooser.setFileFilter(new FileFilter() {
            
            public boolean accept(File f) {
                if(f.isFile()) {
                    String str=f.getName().toLowerCase();
                    if(str.endsWith("png"))
                        return true;
                }
                if(f.isDirectory())
                    return true;
                
                return false;
            }
            
            public String getDescription() {
                return "PNG Files (*.png)";
            }
        });
        fileChooser.setFileFilter(new FileFilter() {
            
            public boolean accept(File f) {
                if(f.isFile()) {
                    String str=f.getName().toLowerCase();
                    if(str.endsWith("bmp"))
                        return true;
                }
                if(f.isDirectory())
                    return true;
                
                return false;
            }
            
            public String getDescription() {
                return "Bitmap Files (*.bmp)";
            }
        });
        if(fileChooser.showOpenDialog(currentChildWindow)==JFileChooser.APPROVE_OPTION) {
            File file=fileChooser.getSelectedFile();
            ChildWindow childWindow=new ChildWindow(file.getPath(),this);
            childWindow.setVisible(true);
            windowList.addWindow(childWindow);
        }
    }//GEN-LAST:event_openMenuItemActionPerformed
        
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        
        System.exit(1);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                setDefaultLookAndFeelDecorated(true);
                new MainFrame().setVisible(true);
            }
        });
    }
    
    void setCurrentFrame(ChildWindow childWindow) {
        currentChildWindow=childWindow;
    }
    
    public void windowOpened(WindowEvent e) {
    }
    
    public void windowClosing(WindowEvent e) {
        System.exit(1);
    }
    
    public void windowClosed(WindowEvent e) {
    }
    
    public void windowIconified(WindowEvent e) {
    }
    
    public void windowDeiconified(WindowEvent e) {
    }
    
    public void windowActivated(WindowEvent e) {
    }
    
    public void windowDeactivated(WindowEvent e) {
    }
    
    public void applyColorEffect(int type, int value) {
        System.out.println(type);
        if(type==ColorEffectWindow.BLUEEFFECT) {
            PlanarImage planarImage=currentChildWindow.getOriginalPlanarImage();
            ImageProcessor imageProcessor=new ImageProcessor(planarImage);
            PlanarImage changedPlanarImage=imageProcessor.blueEffect(value);
            currentChildWindow.setCurrentPlanarImage(changedPlanarImage);
        }
        if(type==ColorEffectWindow.GREENEFFECT) {
            PlanarImage planarImage=currentChildWindow.getOriginalPlanarImage();
            ImageProcessor imageProcessor=new ImageProcessor(planarImage);
            PlanarImage changedPlanarImage=imageProcessor.greenEffect(value);
            currentChildWindow.setCurrentPlanarImage(changedPlanarImage);
        }
        if(type==ColorEffectWindow.REDEFFECT) {
            PlanarImage planarImage=currentChildWindow.getOriginalPlanarImage();
            ImageProcessor imageProcessor=new ImageProcessor(planarImage);
            PlanarImage changedPlanarImage=imageProcessor.redEffect(value);
            currentChildWindow.setCurrentPlanarImage(changedPlanarImage);
        }
        
        
    }
    public void applySmoothEffect(int smoothValue) {
        PlanarImage planarImage=currentChildWindow.getOriginalPlanarImage();
        ImageProcessor imageProcessor=new ImageProcessor(planarImage);
        PlanarImage changedPlanarImage=imageProcessor.smoothEffect(smoothValue);
        currentChildWindow.setCurrentPlanarImage(changedPlanarImage);
        
    }
    
    public void applyRotateEffect(int angle) {
        PlanarImage planarImage=currentChildWindow.getOriginalPlanarImage();
        ImageProcessor imageProcessor=new ImageProcessor(planarImage);
        PlanarImage changedPlanarImage=imageProcessor.rotate((float)angle);
        currentChildWindow.setCurrentPlanarImage(changedPlanarImage);
    }

   public void applyShearEffect(int type, int angle) {
        PlanarImage planarImage=currentChildWindow.getOriginalPlanarImage();
        ImageProcessor imageProcessor=new ImageProcessor(planarImage);
        PlanarImage changedPlanarImage=imageProcessor.shear(type,(float)angle);
        currentChildWindow.setCurrentPlanarImage(changedPlanarImage);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem blueEffect;
    private javax.swing.JMenuItem closeMenuItem;
    private javax.swing.JMenu effectMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem grayEffect;
    private javax.swing.JMenuItem greenEffect;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem horizshearMenuItem;
    private javax.swing.JMenuItem imageExplorer;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem morphingMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem redEffect;
    private javax.swing.JMenuItem resetMenuItem;
    private javax.swing.JMenuItem resolutionMenuItem;
    private javax.swing.JMenuItem rotateMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem scaleMenuItem;
    private javax.swing.JMenu shearMenuItem;
    private javax.swing.JMenuItem smoothMenuItem;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JMenuItem verticalShearMenuItem;
    // End of variables declaration//GEN-END:variables
    
    
}
