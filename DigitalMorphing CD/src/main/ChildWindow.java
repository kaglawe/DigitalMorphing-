/*
 * ChildWindow.java
 *
 * Created on August 15, 2007, 11:25 AM
 */

package main;

import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import javax.media.jai.PlanarImage;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author  Admin
 */
public class ChildWindow extends javax.swing.JFrame implements WindowListener{
    
    private String sourceFilePath;
    private ImagePanel imagePanel;
    private MainFrame parent;
    private PlanarImage originalPlanarImage,currentPlanarImage;
    private JPanel imageContainer;
    //public Vector imagePath;
    /** Creates new form ChildWindow */
    public ChildWindow() {
        initComponents();
        //imagePath=new Vector();
        setSize(750,600);
        imagePanel=new ImagePanel();
        imageContainer=new JPanel();
        imageContainer.add(imagePanel,new GridBagConstraints());
        imageScrollPane.setViewportView(imagePanel);
        addWindowListener(this);
        setDefaultLookAndFeelDecorated(true);
    }
    public ChildWindow(String filePath,JFrame parent) {
        
        sourceFilePath=filePath;
        initComponents();
        //setImagePath(filePath);
        this.parent=(MainFrame)parent;
        setSize(750,600);
        setTitle(new File(filePath).getName());
        imagePanel=new ImagePanel();
        
        JAIImageReader reader=new JAIImageReader(filePath);
        originalPlanarImage=reader.getPlanarImage();
        currentPlanarImage=originalPlanarImage;
        
        imagePanel.setImage(currentPlanarImage);
        imageContainer=new JPanel();
        imageContainer.add(imagePanel,new GridBagConstraints());
        imageScrollPane.setViewportView(imageContainer);
        addWindowListener(this);
        setDefaultLookAndFeelDecorated(true);
        
        
        
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        imageScrollPane = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        imageScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        imageScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        getContentPane().add(imageScrollPane, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-436)/2, (screenSize.height-329)/2, 436, 329);
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChildWindow().setVisible(true);
            }
        });
    }
    
    public void windowOpened(WindowEvent e) {
    }
    
    public void windowClosing(WindowEvent e) {
    }
    
    public void windowClosed(WindowEvent e) {
    }
    
    public void windowIconified(WindowEvent e) {
    }
    
    public void windowDeiconified(WindowEvent e) {
    }
    
    public void windowActivated(WindowEvent e) {
        if(parent!=null)
        parent.setCurrentFrame(this);
    }
    
    public void windowDeactivated(WindowEvent e) {
        
    }
    public void saveAs(String targetFilePath,String extension) {
        
        JAIImageWriter.saveAs(currentPlanarImage,targetFilePath,extension);
    }
    
    public PlanarImage getCurrentPlanarImage() {
        return currentPlanarImage;
    }
    public PlanarImage getOriginalPlanarImage() {
        return originalPlanarImage;
    }
    public void setCurrentPlanarImage(PlanarImage planarImage) {
        currentPlanarImage = planarImage;
        imagePanel.setImage(currentPlanarImage);
        imageScrollPane.setViewportView(imageContainer);
        
        
    }
    public void setOriginalPlanarImage(PlanarImage planarImage) {
        originalPlanarImage = planarImage;
        
    }
    
    public String getSourceFilePath() {
        return sourceFilePath;
    }
    
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane imageScrollPane;
    // End of variables declaration//GEN-END:variables

    public void setBackground(Color c) {
        if(imagePanel!=null)
        imagePanel.setBackground(c);
    }
    
    
}
